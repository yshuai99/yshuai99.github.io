<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yshuai99.github.io</id>
    <title>yshuai</title>
    <updated>2021-06-17T14:54:15.759Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yshuai99.github.io"/>
    <link rel="self" href="https://yshuai99.github.io/atom.xml"/>
    <subtitle>Work for a better world</subtitle>
    <logo>https://yshuai99.github.io/images/avatar.png</logo>
    <icon>https://yshuai99.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, yshuai</rights>
    <entry>
        <title type="html"><![CDATA[Movie Industry Stocks Timing ]]></title>
        <id>https://yshuai99.github.io/post/movie-industry-stocks-timing/</id>
        <link href="https://yshuai99.github.io/post/movie-industry-stocks-timing/">
        </link>
        <updated>2021-06-16T02:37:57.000Z</updated>
        <summary type="html"><![CDATA[<p>This strategy is based on python 3.6 and jq module.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This strategy is based on python 3.6 and jq module.</p>
<!-- more -->
<p>This strategy is developed based on jq module (joinquant.com)</p>
<p>In China, there are a lot of holidays between December and June, I will hold suitable stocks from movie industries during this time.</p>
<h2 id="code">code</h2>
<pre><code class="language-python">import jqdata


def initialize(context):
    set_option('use_real_price', True)
    set_benchmark('000300.XSHG')
    # R86 indicate the movie industry
    stocks = get_industry_stocks('R86')
    
    # Filter for suitable stocks
    fundamental_df = get_fundamentals(
        query(
            indicator.roe,
            indicator.gross_profit_margin,
            valuation.pb_ratio, valuation.code,cash_flow.subtotal_operate_cash_inflow           
        )
        .filter(
            valuation.code.in_ (stocks)
        )
        .filter(
            indicator.roe&gt;0
        )
        .filter(
            indicator.gross_profit_margin&gt;0.3
        )
        .filter(
            valuation.pb_ratio&lt;3
        )
        .filter(
            cash_flow.subtotal_operate_cash_inflow&gt;0
        )
        .order_by(
            valuation.pb_ratio.asc()
        )
        .limit(10)
        
    )
    g.stocks = fundamental_df['code']
    

def handle_data(context, data):
    if len(g.stocks)==0: 
        cash = context.portfolio.available_cash
    else:
        cash = context.portfolio.available_cash/len(g.stocks)
    
    hist = history(1,'1d','close',g.stocks)
 
    for security in g.stocks:
        today = context.current_dt
        current_price = hist[security][0]
        # Hold the stock during December to June
        if today.month == 12 and today.day &gt; 1 and cash &gt; current_price and context.portfolio.positions[security].closeable_amount == 0:
            order_value(security, cash)
            log.info(&quot;Buying %s&quot; % (security))
            
        elif today.month == 6 and today.day &gt; 12 and context.portfolio.positions[security].closeable_amount &gt; 0:
            order_target(security, 0)

            log.info(&quot;Selling %s&quot; % (security))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hollween Effect Strategy]]></title>
        <id>https://yshuai99.github.io/post/hollween-effect-strategy/</id>
        <link href="https://yshuai99.github.io/post/hollween-effect-strategy/">
        </link>
        <updated>2021-06-15T15:30:50.000Z</updated>
        <summary type="html"><![CDATA[<p>The holloween effect strategy is based on python 3.6 and jq module.</p>
]]></summary>
        <content type="html"><![CDATA[<p>The holloween effect strategy is based on python 3.6 and jq module.</p>
<!-- more -->
<p>The strategy is developed based on jq module (joinquant.com)</p>
<blockquote></blockquote>
<p>The Halloween effect is a market-timing strategy based on the hypothesis that stocks perform better between Oct. 31 (Halloween) and May 1 than they do between the beginning of May through the end of October. (Investopedia.com)</p>
<h2 id="code">code</h2>
<pre><code class="language-python">def initialize(context):
    set_option('use_real_price', True)

    # Set up the trading stocks
    g.stocks = ['000001.XSHE','600000.XSHG','600019.XSHG','600028.XSHG','600030.XSHG','600036.XSHG','600519.XSHG','601398.XSHG','601857.XSHG','601988.XSHG']


def handle_data(context, data):
    cash = context.portfolio.available_cash / len(g.stocks)
    hist = history(1,'1d','close',g.stocks)
    for security in g.stocks:
        today = context.current_dt
        current_price = hist[security][0]
        # If the current time is larger than October 15th, buy it.
        if today.month == 10 and today.day &gt; 15 and cash &gt; current_price and context.portfolio.positions[security].closeable_amount == 0:
            order_value(security, cash)
            log.info(&quot;Buying %s&quot; % (security))
        # If the current time is larger than May 5th, then sell it
        elif today.month == 5 and today.day &gt; 15 and context.portfolio.positions[security].closeable_amount &gt; 0:
            order_target(security, 0)
            log.info(&quot;Selling %s&quot; % (security))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic MACD Strategy (IN PROGRESS)]]></title>
        <id>https://yshuai99.github.io/post/basic/</id>
        <link href="https://yshuai99.github.io/post/basic/">
        </link>
        <updated>2021-06-15T13:56:29.000Z</updated>
        <summary type="html"><![CDATA[<p>This is a MACD strategy based on python 3.6.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This is a MACD strategy based on python 3.6.</p>
<!-- more -->
<p>This strategies is developed based on Joinquant module (joinquant.com).</p>
<h1 id="moving-average-convergence-divergence">Moving Average Convergence Divergence</h1>
<pre><code class="language-python">import pandas as pd
import numpy as np
import talib
import jqdata #import jq module



def initialize(context):
    set_params()
    set_backtest()
    run_daily(trade, 'every_bar')

def set_params():
    g.days=0    
    g.refresh_rate=10 

def set_backtest():
    set_benchmark('000905.XSHG') 
    set_option('use_real_price', True)  
    log.set_level('order', 'error')


def before_trading_start(context):
    set_slip_fee(context)

# Set slippage
def set_slip_fee(context):
    set_slippage(FixedSlippage(0.02)) 

    dt=context.current_dt
    if dt&gt;datetime.datetime(2013,1, 1):
        set_order_cost(OrderCost(open_tax=0, close_tax=0.001,                         open_commission=0.0003, 
        close_commission=0.0003, 
        close_today_commission=0, min_commission=5), type='stock')
    else:
        set_order_cost(OrderCost(open_tax=0, open_commission=0.003,                   close_commission=0.003,
        close_tax=0.001,min_commission=5), 
        type='stock')

# Filter for stocks of delisting,  special treatment and paused.
def paused_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].paused]
    return security_list


def delisted_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not '退' in current_data[stock].name]
    return security_list

def st_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].is_st]
    return security_list

#######Operation process####### 
def trade(context):
    #Get the fundamental data
    stock_to_choose = get_fundamentals(query(
        valuation.code, valuation.pe_ratio, 
        valuation.pb_ratio,valuation.market_cap, 
        indicator.eps, indicator.inc_net_profit_annual
    #Filter for some basic conditions
    ).filter(
        valuation.pe_ratio &lt; 40,
        valuation.pe_ratio &gt; 10,
        indicator.eps &gt; 0.3,
        indicator.inc_net_profit_annual &gt; 0.30,
        indicator.roe &gt; 15
    ).order_by(
        valuation.pb_ratio.asc()
    ).limit(
        50), date=None)

    stockpool = list(stock_to_choose['code'])
    stockpool = paused_filter(stockpool)
    stockpool = delisted_filter(stockpool)
    stockpool = st_filter(stockpool)

    long_list = []
    short_list = []
    hold = []

#If it is the date to trade
    if g.days%g.refresh_rate == 0:
        for stock in stockpool:
            prices = attribute_history(stock,300, '1d',['close'])
            price = array(prices['close'])
            # Use talib module to calculate the MACD directly
            macd_tmp = talib.MACD(price, fastperiod=12, slowperiod=26,signalperiod=20)
            DIF = macd_tmp[0]
            DEA = macd_tmp[1]
            MACD = macd_tmp[2]

            #判断MACD走向
            if MACD[-1] &gt; 0 and MACD[-4] &lt; 0:
                long_list.append(stock)
            elif MACD[-1] &lt; 0 and MACD[-4] &gt; 0:
                short_list.append(stock)



        stockset = list(context.portfolio.positions.keys())

        for stock in stockset:
            if stock in short_list:
                order_target_value(stock, 0) 
            else:
                hold.append(stock) #If not in the sell list, then hold it.

        buy_list = []
        for stock in long_list:
            if stock not in hold:
                buy_list.append(stock) # If not in the hold list, then buy it.

        if len(buy_list)==0: 
            Cash = context.portfolio.available_cash
        else:
            Cash = context.portfolio.available_cash/len(buy_list)
            for stock in buy_list:
                order_target_value(stock, Cash)        
        g.days = 1
    else:
        g.days += 1
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Golden Cross Strategy ]]></title>
        <id>https://yshuai99.github.io/post/golden-cross-strategy/</id>
        <link href="https://yshuai99.github.io/post/golden-cross-strategy/">
        </link>
        <updated>2021-06-15T03:23:13.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the simple golden cross strategy.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the simple golden cross strategy.</p>
<!-- more -->
<p>The strategy is based on python 3.6 and jqdata module (joinquant.com)</p>
<h1 id="core-ideas">Core ideas</h1>
<ul>
<li>If the stock has a upwarding trend, buy it. If the stock has a downwarding trend, then sell it.</li>
<li>If close price is larger than the average close price of past five days, buy it. If close price is smaller than the average close price of past five days, then sell it.</li>
</ul>
<h1 id="code">Code</h1>
<pre><code class="language-python">import jqdata

def initialize(context):
    # Set Pingan Bank as trading stock
    g.security = '000001.XSHE'
    # Set benchmark index as HS300
    set_benchmark('000300.XSHG')
    # Adjust with real price
    set_option('use_real_price',True)
    # Trade daily
    run_daily(market_open,time = 'every_bar')
    
def market_open(context):
    security = g.security
    close_data = attribute_history(security,5,'1d',['close'])
    MA5 = close_data['close'].mean()
    current_price = close_data['close'][-1]
    cash = context.portfolio.available_cash
    
    # If the price is larger than average price, buy it.
    if current_price &gt; 1.01*MA5:
        order_value(security,cash)
        log.info('Buying %s' % (security))
    # If  the price is smaller than average price, sell it.
    elif current_price &lt; MA5 and 
    context.portfolio.positions[security].closeable_amount &gt; 0:
        order_target(security,0)
        log.info('Selling %s' % (security))
    record(stock_price = current_price)
</code></pre>
<h1 id="alternative-methods">Alternative methods</h1>
<p>This alternative strategy will hold the stock with higher trading volume</p>
<pre><code class="language-python">import jqdata
def initialize(context):
    set_benchmark('000300.XSHG')
    set_option('use_real_price', True)
    log.set_level('order', 'error')
    set_order_cost(OrderCost(close_tax=0.001, open_commission=0.0003, close_commission=0.0003, min_commission=5), type='stock')
    run_daily(market_open, time='every_bar', reference_security='000300.XSHG')

def paused_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].paused]
    return security_list


def delisted_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not '退' in current_data[stock].name]
    return security_list

def st_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].is_st]
    return security_list


'''
# Or use one function to filter
def filter(security_list):  
    current_data = get_current_data()  
    return[stock for stock in stock_list  
        if not current_data[stock].paused   
        and not '退' in current_data[stock].name   
        and not current_data[stock].is_st]
'''



def market_open(context):
    df = get_fundamentals(query(
        valuation.code, valuation.pe_ratio, valuation.market_cap,valuation.pb_ratio,indicator.eps, indicator.inc_return, indicator.inc_net_profit_annual
    ).filter(
        valuation.pe_ratio&gt;0,
        valuation.pe_ratio&lt;30,
        valuation.pb_ratio&lt;3,
        indicator.inc_net_profit_annual &gt; 0.30
    ).order_by(
        indicator.gross_profit_margin.desc()
    ).limit(
        150), date=None)
    stockset = list(df['code'])
    stockset = paused_filter(stockset)
    stockset = delisted_filter(stockset)
    stockset = st_filter(stockset)  

    buylist = []
    for stock in stockset:
        close_data = attribute_history(stock, 11, '1d', ['close'])
        volume = attribute_history(stock, 21, '1d', ['volume'])

        max20_vol = max(volume['volume'][:20])
        min_vol = min(volume['volume'][11:20])

        max10 = close_data['close'][:10].mean()
        min5 = min(close_data['close'][5:10])

        cur_vol = volume['volume'][-1]
        cur_price = close_data['close'][-1]


        sell_list = list(context.portfolio.positions.keys())
        if (cur_vol &lt; min_vol) or (cur_price &lt; min5):
            stock_sell = stock
            order_target_value(stock_sell, 0) 
        elif (cur_vol &gt;= max20_vol) and (cur_price &gt;= max10) and (stock not in sell_list):
            buylist.append(stock)
    if len(buylist)==0: 
        Cash = context.portfolio.available_cash
    else:
        Cash = context.portfolio.available_cash/len(buylist)
    for stock in buylist:
        order_target_value(stock, Cash)

def security_stoploss(context,loss=0.1):
    if len(context.portfolio.positions)&gt;0:
        for stock in context.portfolio.positions.keys():
            avg_cost = context.portfolio.positions[stock].avg_cost
            current_price = context.portfolio.positions[stock].price
            if 1 - current_price/avg_cost &gt;= loss:
                log.info(str(stock) + '  Sell it！')
                order_target_value(stock, 0)
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[The performance of macroeconomic factors timing in Chinese stock market (IN PROGRESS)]]></title>
        <id>https://yshuai99.github.io/post/the-performance-of-macroeconomic-factors-timing-in-chinese-stock-market/</id>
        <link href="https://yshuai99.github.io/post/the-performance-of-macroeconomic-factors-timing-in-chinese-stock-market/">
        </link>
        <updated>2021-06-11T19:54:41.000Z</updated>
        <summary type="html"><![CDATA[<p>This blog analysis the performance of 9 macroeconomic factors timing strategy in Chinese stock market</p>
]]></summary>
        <content type="html"><![CDATA[<p>This blog analysis the performance of 9 macroeconomic factors timing strategy in Chinese stock market</p>
<!-- more -->
<h1 id="key-points">Key points</h1>
<ul>
<li>I analyze the macroeconomic factors timing strategy in Chinese stock market and find that the single macroeconomic factor is not a good index to long/short Chinese stock market index. However, the 9 macroeconomic factors together is a good indicator to the Chinese stock maket.</li>
<li>The 9 macroeconomic factors are from 5 main aspects of macroeconomic (Economic growth, Interest rate, Credit, Inflation and Exchange rate) and the factor timing strategy is based on the technological analysis tools: Bollinger Bands, Moving averages, etc.</li>
</ul>
<p>The idea of this blog is inspired by the Yujie Chu, the senior manager of Baofu Internet Technology. The data and python API was provided by Joinquant platform (joinquant.com).</p>
<h1 id="macroeconomic-factors">Macroeconomic factors</h1>
<h2 id="pmi">PMI</h2>
<p>The Purchasing Managers' Index (PMI) is an index of the prevailing direction of economic trends in the manufacturing and service sectors. Its purpose is to provide information about current and future business conditions to company decision makers, analysts, and investors. The PMI is based on a monthly survey sent to senior executives and it is complied and released monthly.</p>
<p>The headline PMI is a number from 0 to 100. A PMI above 50 represents an expansion when compared with the previous month. A PMI reading under 50 represents a contraction, and a reading at 50 indicates no change. The further away from 50 indicating the greater the level of change.</p>
<blockquote>
<p>Investors can also use the PMI to their advantage because it is a leading indicator of economic conditions. The direction of the trend in the PMI tends to precede changes in the trend in major estimates of economic activity and output, such as the GDP, Industrial Production, and Employment. Paying attention to the value and movements in the PMI can yield profitable foresight into developing trends in the overall economy.  (investopedia.com)</p>
</blockquote>
<h2 id="shibor">SHIBOR</h2>
<p>The Shanghai Interbank Offered Rate is a  wholesale interest rate calculated by arithmetically averaging all the interbank RMB lending rates offered by the price quotation group of banks with a high credit rating. In this article, the SHIBOR with 1-month maturity is used, as it is reflect the pricing of middle and short term interest rate pricing and it has lower noise than the overnight interbank RMB lending rates.</p>
<h2 id="yield-spread">Yield Spread</h2>
<p>Yield spread is the difference between the quoted rate of return on different debt instruments.</p>
]]></content>
    </entry>
</feed>