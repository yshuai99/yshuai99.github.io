<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yshuai99.github.io</id>
    <title>yshuai</title>
    <updated>2021-06-25T13:19:41.066Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yshuai99.github.io"/>
    <link rel="self" href="https://yshuai99.github.io/atom.xml"/>
    <subtitle>Work for a better world</subtitle>
    <logo>https://yshuai99.github.io/images/avatar.png</logo>
    <icon>https://yshuai99.github.io/favicon.ico</icon>
    <rights>All rights reserved 2021, yshuai</rights>
    <entry>
        <title type="html"><![CDATA[Mean-Variance portfolio with optimization (In progress)]]></title>
        <id>https://yshuai99.github.io/post/mean-variance-portfolio-with-optimization-in-progress/</id>
        <link href="https://yshuai99.github.io/post/mean-variance-portfolio-with-optimization-in-progress/">
        </link>
        <updated>2021-06-25T02:19:20.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the R code and examples for Mean-Variance portfolio with optimization.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the R code and examples for Mean-Variance portfolio with optimization.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Fama-Macbeth Regression (In progress)]]></title>
        <id>https://yshuai99.github.io/post/fama-macbeth-regression-in-progress/</id>
        <link href="https://yshuai99.github.io/post/fama-macbeth-regression-in-progress/">
        </link>
        <updated>2021-06-25T02:18:26.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the R code and examples for Fama-Macbeth Regression.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the R code and examples for Fama-Macbeth Regression.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Pairs Trading (In progress)]]></title>
        <id>https://yshuai99.github.io/post/pairs-trading-in-progress/</id>
        <link href="https://yshuai99.github.io/post/pairs-trading-in-progress/">
        </link>
        <updated>2021-06-25T02:16:54.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the R code and example for the pairs trading.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the R code and example for the pairs trading.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Triangular Arbitrage (In Progress)]]></title>
        <id>https://yshuai99.github.io/post/triangular-arbitrage-in-progress/</id>
        <link href="https://yshuai99.github.io/post/triangular-arbitrage-in-progress/">
        </link>
        <updated>2021-06-25T02:14:53.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the R code and example for foreign, exchange rate and triangular arbitrage.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the R code and example for foreign, exchange rate and triangular arbitrage.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Triangular Arbitrage]]></title>
        <id>https://yshuai99.github.io/post/triangular-arbitrage/</id>
        <link href="https://yshuai99.github.io/post/triangular-arbitrage/">
        </link>
        <updated>2021-06-25T02:14:53.000Z</updated>
        <summary type="html"><![CDATA[<p>Here is the R code and example for foreign, exchange rate and triangular arbitrage.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Here is the R code and example for foreign, exchange rate and triangular arbitrage.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Effectiveness of Some Fundamental Factors in China Stock Market(In Progress)]]></title>
        <id>https://yshuai99.github.io/post/fundamental-factors/</id>
        <link href="https://yshuai99.github.io/post/fundamental-factors/">
        </link>
        <updated>2021-06-24T15:57:25.000Z</updated>
        <summary type="html"><![CDATA[<p>I analyzed the collinearity, exposure and IC of 8 fundamental factors in China stock market.</p>
]]></summary>
        <content type="html"><![CDATA[<p>I analyzed the collinearity, exposure and IC of 8 fundamental factors in China stock market.</p>
<!-- more -->
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Introduction]]></title>
        <id>https://yshuai99.github.io/post/introduction/</id>
        <link href="https://yshuai99.github.io/post/introduction/">
        </link>
        <updated>2021-06-21T21:38:45.000Z</updated>
        <summary type="html"><![CDATA[<p>Hi, I am Yuxin Shuai. I am working on quantitative trading and business data analysis.</p>
]]></summary>
        <content type="html"><![CDATA[<p>Hi, I am Yuxin Shuai. I am working on quantitative trading and business data analysis.</p>
<!-- more -->
<p>Here is the contents of this blog:</p>
<h2 id="technological-analysis">Technological analysis:</h2>
<ul>
<li><a href="https://yshuai99.github.io/post/hollween-effect-strategy/">Holloween effect strategy</a></li>
<li><a href="https://yshuai99.github.io/post/movie-industry-stocks-timing/">Movie industry stocks timing</a></li>
<li><a href="https://yshuai99.github.io/post/golden-cross-strategy/">Golden cross strategy</a></li>
<li><a href="https://yshuai99.github.io/post/basic/">Basic MACD strategy</a></li>
<li><a href="">Triangular Arbitrage (In Progress)</a></li>
<li><a href="">Pairs Trading (In progress)</a></li>
</ul>
<h2 id="reports">Reports</h2>
<ul>
<li>
<p><a href="https://yshuai99.github.io/post/the-performance-of-macroeconomic-factors-timing-in-chinese-stock-market/">The performance of macroeconomic factors timing in Chinese stock market (IN PROGRESS)</a></p>
</li>
<li>
<p><a href="">Effectiveness of Some Fundamental Factors in China Stock Market (In Progress)</a></p>
</li>
</ul>
<h2 id="projects">Projects</h2>
<ul>
<li>[Fama-Macbeth Regression (In progress)]</li>
<li>[Mean-Variance portfolio with optimization (In progress)]</li>
</ul>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Movie Industry Stocks Timing ]]></title>
        <id>https://yshuai99.github.io/post/movie-industry-stocks-timing/</id>
        <link href="https://yshuai99.github.io/post/movie-industry-stocks-timing/">
        </link>
        <updated>2021-06-16T02:37:57.000Z</updated>
        <summary type="html"><![CDATA[<p>This strategy is based on python 3.6 and jq module.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This strategy is based on python 3.6 and jq module.</p>
<!-- more -->
<p>This strategy is developed based on jq module (joinquant.com)</p>
<p>In China, there are a lot of holidays between December and June, I will hold suitable stocks from movie industries during this time.</p>
<h2 id="code">code</h2>
<pre><code class="language-python">import jqdata


def initialize(context):
    set_option('use_real_price', True)
    set_benchmark('000300.XSHG')
    # R86 indicate the movie industry
    stocks = get_industry_stocks('R86')
    
    # Filter for suitable stocks
    fundamental_df = get_fundamentals(
        query(
            indicator.roe,
            indicator.gross_profit_margin,
            valuation.pb_ratio, valuation.code,cash_flow.subtotal_operate_cash_inflow           
        )
        .filter(
            valuation.code.in_ (stocks)
        )
        .filter(
            indicator.roe&gt;0
        )
        .filter(
            indicator.gross_profit_margin&gt;0.3
        )
        .filter(
            valuation.pb_ratio&lt;3
        )
        .filter(
            cash_flow.subtotal_operate_cash_inflow&gt;0
        )
        .order_by(
            valuation.pb_ratio.asc()
        )
        .limit(10)
        
    )
    g.stocks = fundamental_df['code']
    

def handle_data(context, data):
    if len(g.stocks)==0: 
        cash = context.portfolio.available_cash
    else:
        cash = context.portfolio.available_cash/len(g.stocks)
    
    hist = history(1,'1d','close',g.stocks)
 
    for security in g.stocks:
        today = context.current_dt
        current_price = hist[security][0]
        # Hold the stock during December to June
        if today.month == 12 and today.day &gt; 1 and cash &gt; current_price and context.portfolio.positions[security].closeable_amount == 0:
            order_value(security, cash)
            log.info(&quot;Buying %s&quot; % (security))
            
        elif today.month == 6 and today.day &gt; 12 and context.portfolio.positions[security].closeable_amount &gt; 0:
            order_target(security, 0)

            log.info(&quot;Selling %s&quot; % (security))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hollween Effect Strategy]]></title>
        <id>https://yshuai99.github.io/post/hollween-effect-strategy/</id>
        <link href="https://yshuai99.github.io/post/hollween-effect-strategy/">
        </link>
        <updated>2021-06-15T15:30:50.000Z</updated>
        <summary type="html"><![CDATA[<p>The holloween effect strategy is based on python 3.6 and jq module.</p>
]]></summary>
        <content type="html"><![CDATA[<p>The holloween effect strategy is based on python 3.6 and jq module.</p>
<!-- more -->
<p>The strategy is developed based on jq module (joinquant.com)</p>
<blockquote></blockquote>
<p>The Halloween effect is a market-timing strategy based on the hypothesis that stocks perform better between Oct. 31 (Halloween) and May 1 than they do between the beginning of May through the end of October. (Investopedia.com)</p>
<h2 id="code">code</h2>
<pre><code class="language-python">def initialize(context):
    set_option('use_real_price', True)

    # Set up the trading stocks
    g.stocks = ['000001.XSHE','600000.XSHG','600019.XSHG','600028.XSHG','600030.XSHG','600036.XSHG','600519.XSHG','601398.XSHG','601857.XSHG','601988.XSHG']


def handle_data(context, data):
    cash = context.portfolio.available_cash / len(g.stocks)
    hist = history(1,'1d','close',g.stocks)
    for security in g.stocks:
        today = context.current_dt
        current_price = hist[security][0]
        # If the current time is larger than October 15th, buy it.
        if today.month == 10 and today.day &gt; 15 and cash &gt; current_price and context.portfolio.positions[security].closeable_amount == 0:
            order_value(security, cash)
            log.info(&quot;Buying %s&quot; % (security))
        # If the current time is larger than May 5th, then sell it
        elif today.month == 5 and today.day &gt; 15 and context.portfolio.positions[security].closeable_amount &gt; 0:
            order_target(security, 0)
            log.info(&quot;Selling %s&quot; % (security))
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Basic MACD Strategy ]]></title>
        <id>https://yshuai99.github.io/post/basic/</id>
        <link href="https://yshuai99.github.io/post/basic/">
        </link>
        <updated>2021-06-15T02:56:29.000Z</updated>
        <summary type="html"><![CDATA[<p>This is a MACD strategy based on python 3.6.</p>
]]></summary>
        <content type="html"><![CDATA[<p>This is a MACD strategy based on python 3.6.</p>
<!-- more -->
<p>This strategies is developed based on Joinquant module (joinquant.com).</p>
<blockquote>
<p>Moving average convergence divergence (MACD) is a trend-following momentum indicator that shows the relationship between two moving averages of a security's price.</p>
</blockquote>
<h1 id="moving-average-convergence-divergence">Moving Average Convergence Divergence</h1>
<pre><code class="language-python">import pandas as pd
import numpy as np
import talib
import jqdata #import jq module



def initialize(context):
    set_params()
    set_backtest()
    run_daily(trade, 'every_bar')

def set_params():
    g.days=0    
    g.refresh_rate=10 

def set_backtest():
    set_benchmark('000905.XSHG') 
    set_option('use_real_price', True)  
    log.set_level('order', 'error')


def before_trading_start(context):
    set_slip_fee(context)

# Set slippage
def set_slip_fee(context):
    set_slippage(FixedSlippage(0.02)) 

    dt=context.current_dt
    if dt&gt;datetime.datetime(2013,1, 1):
        set_order_cost(OrderCost(open_tax=0, close_tax=0.001,                         open_commission=0.0003, 
        close_commission=0.0003, 
        close_today_commission=0, min_commission=5), type='stock')
    else:
        set_order_cost(OrderCost(open_tax=0, open_commission=0.003,                   close_commission=0.003,
        close_tax=0.001,min_commission=5), 
        type='stock')

# Filter for stocks of delisting,  special treatment and paused.
def paused_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].paused]
    return security_list


def delisted_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not '退' in current_data[stock].name]
    return security_list

def st_filter(security_list):
    current_data = get_current_data()
    security_list = [stock for stock in security_list if not current_data[stock].is_st]
    return security_list

#######Operation process####### 
def trade(context):
    #Get the fundamental data
    stock_to_choose = get_fundamentals(query(
        valuation.code, valuation.pe_ratio, 
        valuation.pb_ratio,valuation.market_cap, 
        indicator.eps, indicator.inc_net_profit_annual
    #Filter for some basic conditions
    ).filter(
        valuation.pe_ratio &lt; 40,
        valuation.pe_ratio &gt; 10,
        indicator.eps &gt; 0.3,
        indicator.inc_net_profit_annual &gt; 0.30,
        indicator.roe &gt; 15
    ).order_by(
        valuation.pb_ratio.asc()
    ).limit(
        50), date=None)

    stockpool = list(stock_to_choose['code'])
    stockpool = paused_filter(stockpool)
    stockpool = delisted_filter(stockpool)
    stockpool = st_filter(stockpool)

    long_list = []
    short_list = []
    hold = []

#If it is the date to trade
    if g.days%g.refresh_rate == 0:
        for stock in stockpool:
            prices = attribute_history(stock,300, '1d',['close'])
            price = array(prices['close'])
            # Use talib module to calculate the MACD directly
            macd_tmp = talib.MACD(price, fastperiod=12, slowperiod=26,signalperiod=20)
            DIF = macd_tmp[0]
            DEA = macd_tmp[1]
            MACD = macd_tmp[2]

            #判断MACD走向
            if MACD[-1] &gt; 0 and MACD[-4] &lt; 0:
                long_list.append(stock)
            elif MACD[-1] &lt; 0 and MACD[-4] &gt; 0:
                short_list.append(stock)



        stockset = list(context.portfolio.positions.keys())

        for stock in stockset:
            if stock in short_list:
                order_target_value(stock, 0) 
            else:
                hold.append(stock) #If not in the sell list, then hold it.

        buy_list = []
        for stock in long_list:
            if stock not in hold:
                buy_list.append(stock) # If not in the hold list, then buy it.

        if len(buy_list)==0: 
            Cash = context.portfolio.available_cash
        else:
            Cash = context.portfolio.available_cash/len(buy_list)
            for stock in buy_list:
                order_target_value(stock, Cash)        
        g.days = 1
    else:
        g.days += 1
</code></pre>
]]></content>
    </entry>
</feed>